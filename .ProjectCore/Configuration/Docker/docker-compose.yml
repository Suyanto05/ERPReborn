version: '3.8'


#---> Docker Services
services:
  #---> Services : PostgreSQL Database
  db-postgresql:
    container_name: 'postgresql'
    #image: 'postgres'
    image: 'erp-reborn-postgresql'
    restart: 'unless-stopped'
    ports:
      - '15432:5432'
      - '13306:3306'
    networks:
      app-network:
        ipv4_address: '172.28.0.2'
    volumes:
      - 'volume-mysql:/var/lib/mysql'
      - './.ProjectCore/Temp/MySQL/:/var/lib/mysql/temp'
      #- 'volume-postgresql:/var/lib/postgresql/data'
      - './.ProjectCore/PermanentStorage/PostgreSQL/var/lib/postgresql/data/:/var/lib/postgresql/data'
      - './.ProjectCore/Temp/PostgreSQL/:/var/lib/postgresql/temp'
      - './.ProjectCore/Configuration/Docker/PostgreSQL/Script.ServiceRestart.sh:/usr/local/bin/Script.ServiceRestart.sh'
        #command: bash -c "Script.ServiceRestart.sh && tail -f /dev/null"
        #    command: nohup Script.ServiceRestart.sh & && sleep infinity
    environment:
      TZ: 'Asia/Jakarta'
      POSTGRES_DB: 'postgres'
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: '748159263'
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'SysEngine'
      MYSQL_PASSWORD: '748159263'
      MYSQL_ROOT_PASSWORD: '748159263'
        #TZ: 'GMT+7'
        #PGTZ: 'GMT+7'
      #PG_MODE=primary
      #PG_PRIMARY_USER=postgres
      #PG_PRIMARY_PASSWORD=yoursecurepassword
      #PG_DATABASE=testdb
      #PG_USER=yourusername
      #PG_PASSWORD=yoursecurepassword
      #PG_ROOT_PASSWORD=yoursecurepassword
      #PG_PRIMARY_PORT=5432
  
  
  #---> Services : PHP Apache BackEnd
  php-apache-backend:
    container_name: 'php-apache-backend'
    build:
      context: '.'
      dockerfile: './.ProjectCore/Configuration/Docker/PHPApacheBackEnd/Dockerfile'
    image: 'erp-reborn-phpapache-backend'
    depends_on:
      - 'db-postgresql'
      - 'redis'
      - 'minio-node01'
      - 'minio-node02'
      - 'minio-node03'
      - 'minio-node04'
    restart: 'unless-stopped'
    tty: 'true'
    ports:
      - '10080:80'
    networks:
      app-network:
        ipv4_address: '172.28.0.3'
    volumes:
      #- './:/var/www/html'
      - './Programming/.LaravelCore:/var/www/html/.LaravelCore'
      - './Programming/WebBackEnd:/var/www/html/WebBackEnd'
      - './.ProjectCore/PermanentStorage/LocalStorage/WebBackEnd:/var/www/html/WebBackEnd/storage/app/Application'
        #- './.ProjectCore/PermanentStorage/PHPApacheBackEnd/zhtConf/log/scheduledTask:/zhtConf/log/scheduledTask'
      - './.ProjectCore/PermanentStorage/PHPApacheBackEnd/zhtConf/log/lastSession/cron.d:/zhtConf/log/lastSession/cron.d'
      - './.ProjectCore/PermanentStorage/PHPApacheBackEnd/zhtConf/log/lastSession/scheduledTask:/zhtConf/log/lastSession/scheduledTask'
      - './.ProjectCore/PermanentStorage/PHPApacheBackEnd/zhtConf/tmp/download:/zhtConf/tmp/download'
      - './.ProjectCore/PermanentStorage/PHPApacheBackEnd/zhtConf/Script:/zhtConf/Script'
      - './.ProjectCore/Configuration/Docker/PHPApacheBackEnd/System/etc/odbc.ini:/etc/odbc.ini'
        #- './.ProjectCore/Configuration/Docker/PHPApacheBackEnd/System/etc/cron.d:/etc/cron.d'
        #- './.ProjectCore/Configuration/Docker/PHPApacheBackEnd/System/etc/cron.d/cron_Script_ImportFile_SCP_SwingBarrierGate_sh:/etc/cron.d/cron_Script_ImportFile_SCP_SwingBarrierGate_sh'
        #- './.ProjectCore/Configuration/Docker/PHPApacheBackEnd/System/etc/cron.d/cron_Script_Laravel_ArtisanScheduleRun_sh:/etc/cron.d/cron_Script_Laravel_ArtisanScheduleRun_sh'
        #- './.ProjectCore/Configuration/Docker/PHPApacheBackEnd/System/etc/cron.d/cron.Script.Laravel.ArtisanScheduleRun.sh:/etc/cron.d/cron.Script.Laravel.ArtisanScheduleRun.sh'
      - './.ProjectCore/Configuration/Docker/PHPApacheBackEnd/Script.ServiceRestart.sh:/usr/local/bin/Script.ServiceRestart.sh'
#    links:
#      - 'db-postgresql'
    environment:
      - COMPOSER_MEMORY_LIMIT=-1
#      DB_CONNECTION: 'pgsql'
#      DB_HOST: 'db-postgresql'
#      DB_PORT: 5432
#      DB_DATABASE: 'dbERPReborn'
#      DB_USERNAME: 'SysEngine'
#      DB_PASSWORD: '748159263'

  #---> Services : PHP Apache FrontEnd
  php-apache-frontend:
    container_name: 'php-apache-frontend'
    build:
      context: '.'
      dockerfile: './.ProjectCore/Configuration/Docker/PHPApacheFrontEnd/Dockerfile'
    image: 'erp-reborn-phpapache-frontend'
    depends_on:
      - 'php-apache-backend'
    restart: 'unless-stopped'
    tty: 'true'
    ports:
      - '20080:80'
    networks:
      app-network:
        ipv4_address: '172.28.0.4'
    volumes:
      - './Programming/.LaravelCore:/var/www/html/.LaravelCore'
      - './Programming/WebFrontEnd:/var/www/html/WebFrontEnd'
      - './.ProjectCore/PermanentStorage/LocalStorage/WebFrontEnd:/var/www/html/WebFrontEnd/storage/app/Application'


  #---> Services : Redis
  redis:
    container_name: 'redis'
    image: 'redis:latest'
    restart: 'unless-stopped'
    ports:
      - '16379:6379'
    networks:
      app-network:
        ipv4_address: '172.28.0.5'
    volumes:
      #- './.ZhtData/Redis/data/:/data'
      - 'volume-redis:/data'


  #---> Services : PGAdmin4
  pgadmin4:
    container_name: 'pgadmin4'
      #image: 'dpage/pgadmin4:latest'
    image: 'dpage/pgadmin4:5.2'
    depends_on:
      - 'db-postgresql'
    restart: 'unless-stopped'
    ports:
      - '15050:80'
    networks:
      app-network:
        ipv4_address: '172.28.0.6'
    volumes:
      - 'volume-pgadmin4:/var/lib/pgadmin'
    environment:
      PGADMIN_DEFAULT_EMAIL: 'pt.qdc.technologies@gmail.com'
      PGADMIN_DEFAULT_PASSWORD: 'qu1d151t3chn0'


  #---> Services : Samba
  samba:
    container_name: 'samba'
    image: 'erp-reborn-samba'
    restart: 'unless-stopped'
    ports:
      - '10053:53'
      - '10053:53/udp'
      - '10088:88'
      - '10088:88/udp'
      - '10135:135'
      - '10137:137'
      - '10138:138/udp'
      - '10139:139'
      - '10389:389'
      - '10389:389/udp'
      - '10445:445'
      - '10464:464'
      - '10464:464/udp'
      - '10636:636'
      - '11024:1024'
      - '11025:1025'
      - '11026:1026'
      - '11027:1027'
      - '11028:1028'
      - '11029:1029'
      - '11030:1030'
      - '11031:1031'
      - '11032:1032'
      - '11033:1033'
      - '11034:1034'
      - '11035:1035'
      - '11036:1036'
      - '11037:1037'
      - '11038:1038'
      - '11039:1039'
      - '11040:1040'
      - '11041:1041'
      - '11042:1042'
      - '11043:1043'
      - '11044:1044'
      - '13268:3268'
      - '13269:3269'
    networks:
      app-network:
        ipv4_address: '172.28.0.7'
    volumes:
      - './.ProjectCore/PermanentStorage/Samba/etc/localtime:/etc/localtime:ro'
      - './.ProjectCore/PermanentStorage/Samba/data:/var/lib/samba'
      - './.ProjectCore/PermanentStorage/Samba/config/samba:/etc/samba/external'
      - './.ProjectCore/Configuration/Docker/Samba/Script.ServiceRestart.sh:/usr/local/bin/Script.ServiceRestart.sh'
    environment:
      - DOMAIN=QDC-FILES.QDC.CO.ID
      - DOMAINPASS=qu1d151t3chn0aNbOcPdQeRfSgThUiVjWkXlYmZ
        #- JOIN=true
      - DNSFORWARDER=192.168.1.1
        #- MULTISITE=true
      - NOCOMPLEXITY=true
      - INSECURELDAP=false
      - HOSTIP=172.28.0.7
    dns_search:
      - qdc.co.id
    hostname: localdc
    cap_add:
      - NET_ADMIN
    privileged: true
    tty: true


  #---> Services : Grafana
  grafana:
    container_name: 'grafana'
    image: 'grafana/grafana:latest'
    depends_on:
      - 'db-postgresql'
      - 'minio-node01'
      #- 'minio-node02'
      - 'pgadmin4'
      - 'php-apache-backend'
      - 'php-apache-frontend'
      - 'redis'
    restart: 'unless-stopped'
    ports:
      - '13000:3000'
    networks:
      app-network:
        ipv4_address: '172.28.0.8'
    volumes:
      #- './.ProjectCore/PermanentStorage/Grafana/etc/grafana/provisioning:/etc/grafana/provisioning'
      - './.ProjectCore/PermanentStorage/Grafana/var/lib/grafana/:/var/lib/grafana'
      - './.ProjectCore/PermanentStorage/Grafana/var/log/grafana/:/var/log/grafana'


  #---> Services : Minio
  minio-node01:
    container_name: 'minio-node01'
    image: 'erp-reborn-minio'
    restart: 'unless-stopped'
    ports:
      - '19000:9000'
    networks:
      app-network:
        ipv4_address: '172.28.0.9'
    volumes:
      - './.ProjectCore/PermanentStorage/MinIO/Node-01/Disk-01/:/data01'
      #- 'volume-minio-node01-disk01:/data01'
    environment:
      TZ: 'Asia/Jakarta'
      MINIO_HOST: '172.28.0.9'
      MINIO_PORT: '9000'
      MINIO_FORCE_NEW_KEYS: 'yes'
      MINIO_ACCESS_KEY: 'pt.qdc.technologies@gmail.com'
      MINIO_SECRET_KEY: 'qu1d151t3chn0'
      MINIO_ROOT_USER: 'pt.qdc.technologies@gmail.com'
      MINIO_ROOT_PASSWORD: 'qu1d151t3chn0'
      MINIO_DISTRIBUTED_MODE_ENABLED: 'yes'
      MINIO_DISTRIBUTED_NODES: 'minio-node01,minio-node02,minio-node03,minio-node04'
      MINIO_SKIP_CLIENT: 'yes'
      HOST_HOSTNAME: hostname``
    command: server http://172.28.0.9/data01 http://172.28.0.10/data01 http://172.28.0.11/data01 http://172.28.0.12/data01 --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.28.0.9:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always

  minio-node02:
    container_name: 'minio-node02'
    image: 'erp-reborn-minio'
    depends_on:
      - 'minio-node01'
    restart: 'unless-stopped'
    ports:
      - '29000:9000'
    networks:
      app-network:
        ipv4_address: '172.28.0.10'
    volumes:
      - './.ProjectCore/PermanentStorage/MinIO/Node-02/Disk-01/:/data01'
      #- 'volume-minio-node02-disk01:/data01'
    environment:
      TZ: 'Asia/Jakarta'
      MINIO_HOST: '172.28.0.10'
      MINIO_PORT: '9000'
      MINIO_FORCE_NEW_KEYS: 'yes'
      MINIO_ACCESS_KEY: 'pt.qdc.technologies@gmail.com'
      MINIO_SECRET_KEY: 'qu1d151t3chn0'
      MINIO_ROOT_USER: 'pt.qdc.technologies@gmail.com'
      MINIO_ROOT_PASSWORD: 'qu1d151t3chn0'
      MINIO_DISTRIBUTED_MODE_ENABLED: 'yes'
      MINIO_DISTRIBUTED_NODES: 'minio-node01,minio-node02,minio-node03,minio-node04'
      MINIO_SKIP_CLIENT: 'yes'
      HOST_HOSTNAME: hostname``
    command: server http://172.28.0.9/data01 http://172.28.0.10/data01 http://172.28.0.11/data01 http://172.28.0.12/data01 --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.28.0.10:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always
    
  minio-node03:
    container_name: 'minio-node03'
    image: 'erp-reborn-minio'
    depends_on:
      - 'minio-node01'
      - 'minio-node02'
    restart: 'unless-stopped'
    ports:
      - '39000:9000'
    networks:
      app-network:
        ipv4_address: '172.28.0.11'
    volumes:
      - './.ProjectCore/PermanentStorage/MinIO/Node-03/Disk-01/:/data01'
      #- 'volume-minio-node03-disk01:/data01'
    environment:
      TZ: 'Asia/Jakarta'
      MINIO_HOST: '172.28.0.11'
      MINIO_PORT: '9000'
      MINIO_FORCE_NEW_KEYS: 'yes'
      MINIO_ACCESS_KEY: 'pt.qdc.technologies@gmail.com'
      MINIO_SECRET_KEY: 'qu1d151t3chn0'
      MINIO_ROOT_USER: 'pt.qdc.technologies@gmail.com'
      MINIO_ROOT_PASSWORD: 'qu1d151t3chn0'
      MINIO_DISTRIBUTED_MODE_ENABLED: 'yes'
      MINIO_DISTRIBUTED_NODES: 'minio-node01,minio-node02,minio-node03,minio-node04'
      MINIO_SKIP_CLIENT: 'yes'
      HOST_HOSTNAME: hostname``
    command: server http://172.28.0.9/data01 http://172.28.0.10/data01 http://172.28.0.11/data01 http://172.28.0.12/data01 --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.28.0.11:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always

  minio-node04:
    container_name: 'minio-node04'
    image: 'erp-reborn-minio'
    depends_on:
      - 'minio-node01'
      - 'minio-node02'
      - 'minio-node03'
    restart: 'unless-stopped'
    ports:
      - '49000:9000'
    networks:
      app-network:
        ipv4_address: '172.28.0.12'
    volumes:
      - './.ProjectCore/PermanentStorage/MinIO/Node-04/Disk-01/:/data01'
      #- 'volume-minio-node04-disk01:/data01'
    environment:
      TZ: 'Asia/Jakarta'
      MINIO_HOST: '172.28.0.12'
      MINIO_PORT: '9000'
      MINIO_FORCE_NEW_KEYS: 'yes'
      MINIO_ACCESS_KEY: 'pt.qdc.technologies@gmail.com'
      MINIO_SECRET_KEY: 'qu1d151t3chn0'
      MINIO_ROOT_USER: 'pt.qdc.technologies@gmail.com'
      MINIO_ROOT_PASSWORD: 'qu1d151t3chn0'
      MINIO_DISTRIBUTED_MODE_ENABLED: 'yes'
      MINIO_DISTRIBUTED_NODES: 'minio-node01,minio-node02,minio-node03,minio-node04'
      MINIO_SKIP_CLIENT: 'yes'
      HOST_HOSTNAME: hostname``
    command: server http://172.28.0.9/data01 http://172.28.0.10/data01 http://172.28.0.11/data01 http://172.28.0.12/data01 --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://172.28.0.12:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always

#---> Docker Volumes
volumes:
  volume-mysql:
    external: true
  volume-postgresql:
    external: true
  volume-pgadmin4:
    external: true
  volume-redis:
    external: true
#  volume-minio-node01-disk01:
#    external: true
#  volume-minio-node01-disk02:
#    external: true
#  volume-minio-node01-disk03:
#    external: true
#  volume-minio-node01-disk04:
#    external: true
#  volume-minio-node02-disk01:
#    external: true
#  volume-minio-node02-disk02:
#    external: true
#  volume-minio-node02-disk03:
#   external: true
#  volume-minio-node02-disk04:
#    external: true
#  volume-minio-node03-disk01:
#    external: true
#  volume-minio-node03-disk02:
#    external: true
#  volume-minio-node03-disk03:
#    external: true
#  volume-minio-node03-disk04:
#    external: true
#  volume-minio-node04-disk01:
#    external: true
#  volume-minio-node04-disk02:
#    external: true
#  volume-minio-node04-disk03:
#    external: true
#  volume-minio-node04-disk04:
#    external: true


#---> Docker Networks
networks:
  app-network:
    ipam:
      driver: 'default'
      config:
       - subnet: '172.28.0.0/16'
